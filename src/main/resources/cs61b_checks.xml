<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration for CS61B.
  Modified from sun_checks.xml, which checks the sun coding conventions from:

    - the Java Language Specification at
      https://docs.oracle.com/javase/specs/jls/se11/html/index.html

    - the Sun Code Conventions at https://www.oracle.com/java/technologies/javase/codeconventions-contents.html

    - the Javadoc guidelines at
      https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html

    - the JDK Api documentation https://docs.oracle.com/en/java/javase/11/

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  https://checkstyle.org (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.
  To suppress certain violations please review suppression filters.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
  <!--
      If you set the basedir property below, then all reported file
      names will be relative to the specified directory. See
      https://checkstyle.org/config.html#Checker
      <property name="basedir" value="${basedir}"/>
  -->
  <property name="basedir" value="${user.dir}"/>

  <property name="severity" value="error"/>

  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- Excludes all 'module-info.java' files              -->
  <!-- See https://checkstyle.org/config_filefilters.html -->
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="module\-info\.java$"/>
  </module>

  <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->
  <module name="SuppressionFilter">
    <property name="file" value="${checkstyle.suppress.file}"/>
    <property name="optional" value="true"/>
  </module>

  <!-- Checks that a package-info.java file exists for each package.     -->
  <!-- See https://checkstyle.org/config_javadoc.html#JavadocPackage -->
  <!-- <module name="JavadocPackage"/> -->

  <!-- Checks whether files end with a new line.                        -->
  <!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile -->
  <!-- <module name="NewlineAtEndOfFile"/> -->
  <module name="NewlineAtEndOfFile">
     <property name="lineSeparator" value="lf_cr_crlf"/>
  </module>

  <!-- Checks that property files contain the same keys.         -->
  <!-- See https://checkstyle.org/config_misc.html#Translation -->
  <module name="Translation"/>

  <!-- Checks for Size Violations.                    -->
  <!-- See https://checkstyle.org/config_sizes.html -->
  <!-- <module name="FileLength"/> -->
  <module name="FileLength">
       <property name="max" value="2000"/>
  </module>
  <module name="LineLength">
    <property name="fileExtensions" value="java"/>
  </module>

  <!-- Checks for whitespace                               -->
  <!-- See https://checkstyle.org/config_whitespace.html -->
  <module name="FileTabCharacter"/>

  <!-- Miscellaneous other checks.                   -->
  <!-- See https://checkstyle.org/config_misc.html -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="minimum" value="0"/>
    <property name="maximum" value="0"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <!-- Checks for Headers                                -->
  <!-- See https://checkstyle.org/config_header.html   -->
  <!-- <module name="Header"> -->
  <!--   <property name="headerFile" value="${checkstyle.header.file}"/> -->
  <!--   <property name="fileExtensions" value="java"/> -->
  <!-- </module> -->

  <module name="TreeWalker">

    <!-- Checks for Javadoc comments.                     -->
    <!-- See https://checkstyle.org/config_javadoc.html -->
    <module name="InvalidJavadocPosition"/>
    <!-- <module name="JavadocMethod"/> -->
    <module name="JavadocMethod61b">
      <property name="allowNarrativeParamTags" value="true"/>
      <property name="allowNarrativeReturnTags" value="true"/>
      <property name="unusedParamFormat" 
                value="^(dummy|ignored|unused).*$"/>
      <!--For now:-->
      <property name="allowMissingThrowsTags" value="true"/>
    </module>
    <!-- <module name="JavadocType"> -->
    <module name="JavadocType">
      <property name="authorFormat" value="^\s*\w[-\w\s.]+"/>
      <property name="allowMissingParamTags" value="true"/>
    </module>
    
    <!-- <module name="JavadocVariable"/> -->
    <module name="JavadocVariable">
      <property name="tokens" value="VARIABLE_DEF">
    </module>

    <module name="JavadocStyle"/>
    <!-- <module name="MissingJavadocMethod"/> -->

    <!-- Checks for Naming Conventions.                  -->
    <!-- See https://checkstyle.org/config_naming.html -->
    <!--
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/> -->
    <module name="ConstantName">
      <message key="name.invalidPattern"
               value="Constant ''{0}'' must be in all capitals." />
    </module>
    <module name="LocalFinalVariableName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
              value="Local final variable ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
              value="Local variable ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="MemberName">
      <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|^[A-Z]$|^_[a-zA-Z0-9]+$"/>
      <message key="name.invalidPattern"
              value="Instance variable ''{0}'' must be single upper-case letter or must start with either a lower-case letter or '_'."/>
    </module>
    <module name="MethodName">
      <property name="format" value="^([a-z][a-zA-Z0-9]*|[A-Z])$"/>
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter." />
    </module>
    <module name="PackageName">
      <property name="format" 
                value="^[a-z][a-z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
      <message key="name.invalidPattern"
               value="Package name ''{0}'' must start with a lower-case letter."/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
      <message key="name.invalidPattern"
               value="Parameter ''{0}'' must start with a lower-case letter, or consist of a single, upper-case letter followed by 0 or more digits." />
    </module>
    <module name="StaticVariableName">
      <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|_[A-Z]$"/>
      <message key="name.invalidPattern"
               value="Static variable ''{0}'' must start with either a lower-case letter or '_'." />
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
               value="Type (class) name ''{0}'' must start with a capital letter."/>
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Type parameter ''{0}'' must start with a capital letter."/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Type parameter ''{0}'' must start with a capital letter."/>
    </module>


    <!-- Checks for imports                              -->
    <!-- See https://checkstyle.org/config_imports.html -->
    <!-- <module name="AvoidStarImport"/> -->
    <module name="AvoidStarImport">
      <property name="excludes"
  	        value="java.lang.Math,org.junit.Assert,java.lang.Double"/>
      <property name="allowStaticMemberImports" value="true"/>
    </module>
    <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
    <module name="RedundantImport"/>
    <module name="UnusedImports">
      <property name="processJavadoc" value="false"/>
    </module>

    <!-- Checks for Size Violations.                    -->
    <!-- See https://checkstyle.org/config_sizes.html -->
    <module name="MethodLength"/>
    <!-- <module name="ParameterNumber"/> -->
    <module name="LineLength">
      <property name="max" value="80"/>
    </module>
    <module name="MethodLength">
      <property name="max" value="60"/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="8"/>
    </module>
    <module name="OuterTypeNumber">
      <property name="max" value="1"/>
    </module>
    

    <!-- Checks for whitespace                               -->
    <!-- See https://checkstyle.org/config_whitespace.html -->
    <-- <module name="EmptyForIteratorPad"/> -->
    <module name="GenericWhitespace"/>
    <!-- <module name="MethodParamPad"/> -->
    <!-- <module name="NoWhitespaceAfter"/> -->
    <module name="MethodParamPad">
      <property name="allowLineBreaks" value="true"/>
    </module>
    <module name="NoWhitespaceAfter">
      <property name="tokens"
                value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>

    <module name="TrailingComment">
      <property name="format" value="^\s*$"/>
    </module>
    <module name="InternalComments">
      <property name="allowedCppFormats" value=""/>
      <property name="allowedCFormats" 
                value="package class func init prestmts stmts @/\*(?i)\s*(fall\s*through\.?|ignore\s*\w+\.?|no\s+action)\s*\*/\s*@"/>
    </module>
 
    <!-- Modifier Checks                                    -->
    <!-- See https://checkstyle.org/config_modifier.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See https://checkstyle.org/config_blocks.html -->
    <!-- <module name="AvoidNestedBlocks"/> -->
    <!-- <module name="EmptyBlock"/> -->
    <module name="EmptyBlock">
      <property name="option" value="statement"/>
      <property name="tokens" value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,INSTANCE_INIT,STATIC_INIT"/>
    </module>
    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_CATCH,LITERAL_WHILE"/>
    </module>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    <!-- Checks for common coding problems               -->
    <!-- See https://checkstyle.org/config_coding.html -->
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField"/>
    <module name="IllegalInstantiation"/>
    <!-- <module name="InnerAssignment"/> -->
    <!-- <module name="MagicNumber"/> -->
    <module name="InnerAssignment61b">
      <property name="allowedContext"
                value="ASSIGN,RESOURCE"/>
    </module>
    <module name="MagicNumber">
      <property name="ignoreFieldDeclaration" value="true"/>
      <property name="ignoreNumbers"
                value="-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 100, 1000, 0.5, -0.5, 0.25, -0.25, 0.75, -0.75"/>
    </module>

    
    <module name="MissingSwitchDefault"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>

    <!-- Checks for class design                         -->
    <!-- See https://checkstyle.org/config_design.html -->
    <!-- <module name="DesignForExtension"/> -->
    <!-- <module name="FinalClass"/> -->
    <!-- <module name="HideUtilityClassConstructor"/> -->
    <module name="InterfaceIsType"/>
    <!-- <module name="VisibilityModifier"/> -->
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true"/>
    </module>
    
    <!-- It seems that most editors that our students use treat tabs as
         4 blanks.   Of course, this common choice is completely idiotic.
         It also has the effect of amplifying the error of including 
         tab characters in the source by causing many indentation errors,
         unless we treat tabs as 4 blanks. True, as a result,
         people whose editors correctly treat tabs as 8 characters get
         many errors if they leave tabs in their files, but let us hope
         that since they chose proper editors, they are also sensible
         enough NOT to use tab characters in their source files.-->
    <property name="tabWidth" value="4"/>

    <!-- indentation checks                           -->
    <module name="Indentation">
      <property name="basicOffset" value="4"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="0"/>
    </module>
 
    <!-- Miscellaneous other checks.                   -->
    <!-- See https://checkstyle.org/config_misc.html -->
    <module name="ArrayTypeStyle"/>
    <!-- <module name="FinalParameters"/> -->
    <!-- <module name="TodoComment"/> -->
    <module name="UpperEll"/>

    <!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter -->
    <module name="SuppressionXpathFilter">
      <property name="file" value="${org.checkstyle.sun.suppressionxpathfilter.config}"
                default="checkstyle-xpath-suppressions.xml" />
      <property name="optional" value="true"/>
    </module>

  </module>

</module>
